<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Cinema List Derby</title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <meta name="csrf-token" content="<%= form_authenticity_token %>">
    <style>
      :root {
        --bg-color: #1a1a1a;
        --text-color: #ffffff;
        --card-bg: #2d2d2d;
        --border-color: #444;
        --accent-color: #b026ff;
        --accent-primary: #b026ff;
        --accent-secondary: #8b00ff;
        --accent-gold: #daa520;
      }
      
      /* Import cursive fonts - force load with display swap */
      @import url('https://fonts.googleapis.com/css2?family=Satisfy&display=swap');
      @import url('https://fonts.googleapis.com/css2?family=Kaushan+Script&display=swap');
      @import url('https://fonts.googleapis.com/css2?family=Yellowtail&display=swap');
      
      body { 
        font-family: Arial, sans-serif; 
        margin: 0; 
        padding: 0; 
        background: var(--bg-color); 
        color: var(--text-color);
      }
      
      .navbar {
        background: var(--card-bg);
        border-bottom: 2px solid var(--border-color);
        padding: 0;
        position: sticky;
        top: 0;
        z-index: 1000;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      }

      .navbar-container {
        max-width: 1400px;
        margin: 0 auto;
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem 2rem;
      }

      .navbar-brand {
        text-decoration: none;
        display: flex;
        align-items: center;
        gap: 0.75rem;
        transition: all 0.3s ease;
      }

      .navbar-brand:hover {
        transform: translateY(-2px);
      }
      
      .navbar-brand-icon {
        width: 32px;
        height: 32px;
        fill: url(#carGradient);
        filter: drop-shadow(0 0 10px rgba(176, 38, 255, 0.5));
        transition: all 0.3s ease;
      }
      
      .navbar-brand:hover .navbar-brand-icon {
        filter: drop-shadow(0 0 15px rgba(176, 38, 255, 0.8));
      }
      
      .navbar-brand-text {
        font-family: 'Satisfy', 'Brush Script MT', 'Lucida Handwriting', cursive !important;
        font-size: 2.5rem;
        font-weight: 400;
        color: var(--accent-color);
        letter-spacing: 3px;
        text-shadow: 0 0 20px rgba(176, 38, 255, 0.6), 
                     0 0 40px rgba(218, 165, 32, 0.3);
        font-style: normal;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
        transform: rotate(-2deg);
      }

      .navbar-nav {
        display: flex;
        gap: 0.5rem;
        align-items: center;
        list-style: none;
        margin: 0;
        padding: 0;
      }

      .nav-link {
        padding: 0.6rem 1rem;
        color: var(--text-color);
        text-decoration: none;
        border-radius: 6px;
        font-weight: 500;
        transition: all 0.2s;
        display: flex;
        align-items: center;
        gap: 0.3rem;
      }

      .nav-link:hover {
        background: var(--accent-color);
        color: white;
      }

      .nav-link.active {
        background: var(--accent-color);
        color: white;
      }

      .main-content {
        padding: 20px;
      }

      /* Responsive navbar */
      @media (max-width: 768px) {
        .navbar-container {
          flex-direction: column;
          gap: 1rem;
          padding: 1rem;
        }

        .navbar-nav {
          flex-wrap: wrap;
          justify-content: center;
          gap: 0.3rem;
        }

        .nav-link {
          padding: 0.5rem 0.75rem;
          font-size: 0.9rem;
        }

        .navbar-brand {
          font-size: 1.2rem;
        }
      }
      
      .user-indicator {
        position: relative;
      }
      
      .user-menu-toggle {
        background: var(--card-bg);
        border: 2px solid var(--accent-color);
        border-radius: 20px;
        padding: 0.5rem 1rem;
        color: var(--accent-color);
        font-weight: 600;
        font-size: 0.9rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        cursor: pointer;
        transition: all 0.2s;
      }
      
      .user-menu-toggle:hover {
        background: var(--accent-color);
        color: white;
      }
      
      .user-dropdown {
        position: absolute;
        top: calc(100% + 0.5rem);
        right: 0;
        background: var(--card-bg);
        border: 2px solid var(--accent-color);
        border-radius: 8px;
        min-width: 200px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
        display: none;
        z-index: 1001;
      }
      
      .user-dropdown.show {
        display: block;
      }
      
      .user-dropdown a, .user-dropdown button {
        display: block;
        width: 100%;
        padding: 0.75rem 1rem;
        color: var(--text-color);
        text-decoration: none;
        transition: all 0.2s;
        border-bottom: 1px solid var(--border-color);
        background: transparent;
        border-left: none;
        border-right: none;
        border-top: none;
        text-align: left;
        font-size: 1rem;
        cursor: pointer;
        font-family: inherit;
      }
      
      .user-dropdown a:last-child, .user-dropdown button:last-child {
        border-bottom: none;
      }
      
      .user-dropdown a:hover, .user-dropdown button:hover {
        background: var(--accent-color);
        color: white;
      }
      
      .user-dropdown-header {
        padding: 0.75rem 1rem;
        border-bottom: 2px solid var(--border-color);
        font-weight: 600;
        color: var(--accent-color);
        font-size: 0.9rem;
      }
      /* SOPHISTICATED FILM-FOCUSED DESIGN WITH NEON PURPLE ACCENT */
      .home-hero-banner {
        background: linear-gradient(135deg, #0a0a0a 0%, #1a051a 50%, #0a0a0a 100%);
        padding: 8rem 2rem;
        text-align: center;
        position: relative;
        overflow: hidden;
        min-height: 700px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-bottom: 3px solid #8b00ff;
        box-shadow: inset 0 -50px 100px rgba(176, 38, 255, 0.15);
      }
      
      .hero-film-grid {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        display: grid;
        grid-template-columns: repeat(8, 1fr);
        gap: 8px;
        padding: 8px;
        opacity: 0.85;
      }
      
      .film-poster {
        background-size: cover;
        background-position: center center;
        background-repeat: no-repeat;
        border-radius: 4px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.6);
        animation: subtle-float 25s ease-in-out infinite;
        transition: all 0.4s ease;
        position: relative;
      }
      
      .film-poster::after {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(180deg, transparent 0%, rgba(176, 38, 255, 0.15) 100%);
        opacity: 0.3;
        transition: opacity 0.4s ease;
      }
      
      .film-poster:hover {
        transform: scale(1.08) translateY(-5px);
        z-index: 10;
        box-shadow: 0 12px 30px rgba(139, 0, 255, 0.6), 0 0 40px rgba(176, 38, 255, 0.4);
      }
      
      .film-poster:hover::after {
        opacity: 0;
      }
      
      @keyframes subtle-float {
        0%, 100% { transform: translateY(0); }
        50% { transform: translateY(-10px); }
      }
      
      /* Iconic Film Posters - Mix of classic, cult, and arthouse */
      .film-poster-1 {
        background-image: url('https://image.tmdb.org/t/p/w342/aKx1ARwG55zZ0GpRvU2WrGrCG9o.jpg'); /* The Shawshank Redemption - far left */
        animation-delay: 0s;
      }
      .film-poster-2 {
        background-image: url('https://image.tmdb.org/t/p/w342/npMcVaahgzJcBuDLJ0eIzqAQzQk.jpg'); /* The Dark Knight */
        animation-delay: 2s;
      }
      .film-poster-3 {
        background-image: url('https://image.tmdb.org/t/p/w342/db6w6KxL0T2nxLn4Cc3Cp7uFl1U.jpg'); /* Pulp Fiction */
        animation-delay: 4s;
      }
      .film-poster-4 {
        background-image: url('https://image.tmdb.org/t/p/w342/7IiTTgloJzvGI1TAYymCfbfl3vT.jpg'); /* Parasite */
        animation-delay: 6s;
      }
      .film-poster-5 {
        background-image: url('https://image.tmdb.org/t/p/w342/3bhkrj58Vtu7enYsRolD1fZdja1.jpg'); /* The Godfather */
        animation-delay: 8s;
      }
      .film-poster-6 {
        background-image: url('https://image.tmdb.org/t/p/w342/6oom5QYQ2yQTMJIbnvbkBL9cHo6.jpg'); /* Lord of the Rings - middle */
        animation-delay: 10s;
      }
      .film-poster-7 {
        background-image: url('https://image.tmdb.org/t/p/w342/39wmItIWsg5sZMyRUHLkWBcuVCM.jpg'); /* Spirited Away */
        animation-delay: 12s;
      }
      .film-poster-8 {
        background-image: url('https://image.tmdb.org/t/p/w342/rCzpDGLbOoPwLjy3OAm5NUPOTrC.jpg'); /* Interstellar - far right */
        animation-delay: 14s;
      }
      
      .hero-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: radial-gradient(
          ellipse at center,
          rgba(10, 10, 10, 0.3) 0%,
          rgba(26, 5, 5, 0.6) 50%,
          rgba(10, 10, 10, 0.8) 100%
        );
        backdrop-filter: blur(0.5px);
      }
      
      .hero-content {
        position: relative;
        z-index: 2;
        max-width: 1200px;
        margin: 0 auto;
      }
      
      .hero-badge {
        display: inline-block;
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
        padding: 0.5rem 1.5rem;
        border-radius: 4px;
        color: rgba(255, 255, 255, 0.9);
        font-weight: 500;
        font-size: 0.8rem;
        letter-spacing: 3px;
        margin-bottom: 2rem;
        border: 1px solid rgba(255, 255, 255, 0.2);
        text-transform: uppercase;
      }
      
      .hero-title {
        font-size: clamp(3.5rem, 12vw, 8rem);
        font-weight: 900;
        line-height: 0.85;
        margin: 0;
        color: white;
        text-shadow: 0 8px 32px rgba(0, 0, 0, 0.6);
        letter-spacing: -4px;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
      }
      
      .hero-title span {
        display: block;
        animation: slide-in 0.8s cubic-bezier(0.68, -0.55, 0.265, 1.55);
        position: relative;
      }
      
      .title-line-1 { 
        animation-delay: 0.1s; 
      }
      .title-line-2 { 
        animation-delay: 0.3s; 
        background: linear-gradient(135deg, #b026ff 0%, #8b00ff 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        text-shadow: 0 0 30px rgba(176, 38, 255, 0.6);
      }
      .title-line-3 { 
        animation-delay: 0.5s; 
        background: linear-gradient(135deg, #daa520 0%, #ffd700 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        text-shadow: 0 0 30px rgba(218, 165, 32, 0.5);
      }
      
      @keyframes slide-in {
        from {
          opacity: 0;
          transform: translateY(50px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }
      
      .hero-tagline {
        font-size: 1.3rem;
        color: rgba(255, 255, 255, 0.8);
        margin: 2.5rem 0 0 0;
        font-weight: 400;
        letter-spacing: 1px;
        font-style: italic;
        animation: fade-in 1s ease 0.8s both;
      }
      
      @keyframes fade-in {
        from { opacity: 0; }
        to { opacity: 1; }
      }
      
      /* FEATURES GRID */
      .home-features-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
        gap: 2rem;
        padding: 3rem 2rem;
        max-width: 1200px;
        margin: 0 auto;
        background: var(--bg-color);
      }
      
      .feature-card {
        background: linear-gradient(135deg, rgba(26, 5, 26, 0.4) 0%, rgba(26, 26, 26, 0.6) 100%);
        border: 1px solid rgba(176, 38, 255, 0.2);
        border-radius: 4px;
        padding: 3rem 2rem;
        text-align: left;
        transition: all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
        position: relative;
        overflow: hidden;
        backdrop-filter: blur(10px);
        box-shadow: 0 4px 15px rgba(176, 38, 255, 0.1);
      }
      
      .feature-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 3px;
        height: 100%;
        background: linear-gradient(180deg, transparent 0%, #b026ff 50%, transparent 100%);
        opacity: 0;
        transition: opacity 0.4s ease;
        box-shadow: 0 0 10px rgba(176, 38, 255, 0.6);
      }
      
      .feature-card:hover::before {
        opacity: 1;
      }
      
      .feature-card:hover {
        transform: translateX(10px);
        background: linear-gradient(135deg, rgba(26, 5, 26, 0.7) 0%, rgba(26, 26, 26, 0.9) 100%);
        border-color: rgba(176, 38, 255, 0.5);
        box-shadow: 0 8px 25px rgba(176, 38, 255, 0.3);
      }
      
      .feature-card--primary:hover::before {
        background: linear-gradient(180deg, transparent 0%, #b026ff 50%, transparent 100%);
      }
      
      .feature-card--secondary:hover::before {
        background: linear-gradient(180deg, transparent 0%, #8b00ff 50%, transparent 100%);
      }
      
      .feature-card--tertiary:hover::before {
        background: linear-gradient(180deg, transparent 0%, #daa520 50%, transparent 100%);
      }
      
      .feature-number {
        font-size: 4rem;
        font-weight: 900;
        color: rgba(255, 255, 255, 0.05);
        margin-bottom: -1rem;
        line-height: 1;
        font-family: 'Courier New', monospace;
      }
      
      .feature-card h3 {
        font-size: 1.4rem;
        font-weight: 600;
        color: var(--text-primary);
        margin: 0 0 1rem 0;
        letter-spacing: 0.5px;
      }
      
      .feature-card p {
        color: var(--text-secondary);
        font-size: 0.95rem;
        margin: 0;
        line-height: 1.7;
        font-weight: 300;
      }
      
      /* SEARCH SECTION */
      .home-search-section {
        background: linear-gradient(180deg, var(--bg-color) 0%, rgba(176, 38, 255, 0.05) 100%);
        padding: 4rem 2rem;
      }
      
      .search-header {
        text-align: center;
        margin-bottom: 3rem;
      }
      
      .search-title {
        font-size: clamp(2rem, 5vw, 3.5rem);
        font-weight: 900;
        background: linear-gradient(135deg, var(--accent-gold) 0%, var(--accent-color) 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        margin: 0 0 1rem 0;
        letter-spacing: 2px;
        text-shadow: 0 0 20px rgba(218, 165, 32, 0.5);
      }
      
      .search-subtitle {
        font-size: 1.2rem;
        color: var(--text-secondary);
        margin: 0;
      }
      
      /* NEW CTA SECTION WITH NEON PURPLE */
      .home-cta-section {
        background: linear-gradient(135deg, #1a051a 0%, #0a0a0a 50%, #1a051a 100%);
        padding: 5rem 2rem;
        margin-top: 4rem;
        position: relative;
        overflow: hidden;
        border-top: 3px solid #8b00ff;
        box-shadow: inset 0 50px 100px rgba(176, 38, 255, 0.1);
      }
      
      .home-cta-section::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: 
          radial-gradient(circle at 20% 50%, rgba(176, 38, 255, 0.2) 0%, transparent 50%),
          radial-gradient(circle at 80% 80%, rgba(139, 0, 255, 0.2) 0%, transparent 50%);
        animation: pulse-glow 4s ease-in-out infinite;
      }
      
      @keyframes pulse-glow {
        0%, 100% { opacity: 0.5; }
        50% { opacity: 1; }
      }
      
      .cta-container {
        max-width: 800px;
        margin: 0 auto;
        text-align: center;
        position: relative;
        z-index: 2;
      }
      
      .cta-content-new {
        text-align: center;
      }
      
      .cta-heading {
        font-size: clamp(2rem, 4vw, 3.5rem);
        font-weight: 900;
        color: white;
        margin: 0 0 1rem 0;
        line-height: 1.1;
        letter-spacing: 1px;
      }
      
      .cta-text-new {
        font-size: 1.3rem;
        color: rgba(255, 255, 255, 0.8);
        margin: 0 0 2rem 0;
        line-height: 1.6;
      }
      
      .cta-button-new {
        display: inline-flex;
        align-items: center;
        gap: 1rem;
        background: linear-gradient(135deg, #b026ff 0%, #8b00ff 100%);
        color: white;
        padding: 1.5rem 3rem;
        border-radius: 4px;
        font-size: 1.2rem;
        font-weight: 700;
        text-decoration: none;
        text-transform: uppercase;
        letter-spacing: 2px;
        box-shadow: 0 10px 40px rgba(176, 38, 255, 0.5), 0 0 20px rgba(139, 0, 255, 0.3);
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
        border: 1px solid rgba(176, 38, 255, 0.5);
      }
      
      .cta-button-new::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
        transition: left 0.5s ease;
      }
      
      .cta-button-new:hover::before {
        left: 100%;
      }
      
      .cta-button-new:hover {
        transform: translateY(-5px) scale(1.05);
        box-shadow: 0 15px 50px rgba(176, 38, 255, 0.8), 0 0 40px rgba(176, 38, 255, 0.6);
        background: linear-gradient(135deg, #c453ff 0%, #b026ff 100%);
      }
      
      .button-arrow {
        font-size: 1.5rem;
        transition: transform 0.3s ease;
      }
      
      .cta-button-new:hover .button-arrow {
        transform: translateX(10px);
      }
      
      .cta-fine-print {
        margin-top: 1rem;
        font-size: 0.9rem;
        color: rgba(255, 255, 255, 0.6);
      }
      
      /* RESPONSIVE */
      @media (max-width: 768px) {
        .hero-title {
          font-size: 3rem;
        }
        
        .home-features-grid {
          grid-template-columns: 1fr;
          padding: 2rem 1rem;
        }
        
        .cta-container {
          grid-template-columns: 1fr;
          gap: 2rem;
        }
        
        .cta-graphic {
          height: 200px;
        }
        
        .cta-content-new {
          text-align: center;
        }
        
        .cta-button-new {
          width: 100%;
          justify-content: center;
        }
      }
      .search-container { max-width: 600px; margin: 0 auto; }
      .search-form { margin-bottom: 20px; }
      
      /* Welcome CTA Banner for new users */
      .welcome-cta {
        margin-top: 3rem;
        max-width: 800px;
        margin-left: auto;
        margin-right: auto;
        position: relative;
        animation: fadeInUp 0.8s ease-out;
      }
      
      @keyframes fadeInUp {
        from {
          opacity: 0;
          transform: translateY(20px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }
      
      .cta-content {
        background: linear-gradient(135deg, rgba(0, 255, 255, 0.15) 0%, rgba(0, 200, 255, 0.1) 100%);
        border: 2px solid var(--accent-color);
        border-radius: 20px;
        padding: 2.5rem;
        display: flex;
        align-items: center;
        gap: 2rem;
        position: relative;
        overflow: hidden;
        box-shadow: 0 10px 40px rgba(0, 255, 255, 0.2);
        transition: all 0.3s ease;
      }
      
      .cta-content::before {
        content: '';
        position: absolute;
        top: -50%;
        left: -50%;
        width: 200%;
        height: 200%;
        background: linear-gradient(
          45deg,
          transparent,
          rgba(0, 255, 255, 0.1),
          transparent
        );
        animation: shimmer 3s infinite;
      }
      
      @keyframes shimmer {
        0% {
          transform: translateX(-100%) translateY(-100%) rotate(45deg);
        }
        100% {
          transform: translateX(100%) translateY(100%) rotate(45deg);
        }
      }
      
      .cta-content:hover {
        transform: translateY(-5px);
        box-shadow: 0 15px 50px rgba(0, 255, 255, 0.3);
        border-color: rgba(0, 255, 255, 0.8);
      }
      
      .cta-icon {
        font-size: 4rem;
        animation: float 3s ease-in-out infinite;
        z-index: 1;
        flex-shrink: 0;
      }
      
      @keyframes float {
        0%, 100% {
          transform: translateY(0px);
        }
        50% {
          transform: translateY(-10px);
        }
      }
      
      .cta-text {
        flex: 1;
        z-index: 1;
      }
      
      .cta-title {
        font-size: 1.8rem;
        font-weight: 700;
        color: var(--accent-color);
        margin: 0 0 0.75rem 0;
        background: linear-gradient(135deg, var(--accent-color) 0%, #00ccff 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
      }
      
      .cta-description {
        font-size: 1.1rem;
        line-height: 1.6;
        color: var(--text-secondary);
        margin: 0;
      }
      
      .cta-button {
        background: var(--accent-color);
        color: #000;
        padding: 1rem 2rem;
        border-radius: 50px;
        font-weight: 700;
        font-size: 1.1rem;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 0.75rem;
        transition: all 0.3s ease;
        box-shadow: 0 5px 20px rgba(0, 255, 255, 0.4);
        z-index: 1;
        position: relative;
        flex-shrink: 0;
      }
      
      .cta-button:hover {
        background: #00ffff;
        transform: scale(1.05);
        box-shadow: 0 8px 30px rgba(0, 255, 255, 0.6);
      }
      
      .cta-button-text {
        font-weight: 700;
      }
      
      .cta-button-arrow {
        font-size: 1.5rem;
        transition: transform 0.3s ease;
      }
      
      .cta-button:hover .cta-button-arrow {
        transform: translateX(5px);
      }
      
      /* Responsive design for CTA */
      @media (max-width: 768px) {
        .cta-content {
          flex-direction: column;
          text-align: center;
          padding: 2rem 1.5rem;
          gap: 1.5rem;
        }
        
        .cta-icon {
          font-size: 3rem;
        }
        
        .cta-title {
          font-size: 1.5rem;
        }
        
        .cta-description {
          font-size: 1rem;
        }
        
        .cta-button {
          width: 100%;
          justify-content: center;
        }
      }
      .search-input-group { display: flex; gap: 10px; margin-bottom: 15px; }
      .search-input { 
        flex: 1; 
        padding: 12px; 
        border: 2px solid var(--border-color); 
        border-radius: 6px; 
        font-size: 16px; 
        background: var(--card-bg);
        color: var(--text-color);
      }
      .search-input:focus { outline: none; border-color: var(--accent-color); }
      
      /* Form styles for signup */
      .form-input { 
        width: 100%; 
        padding: 12px; 
        border: 2px solid var(--border-color); 
        border-radius: 6px; 
        font-size: 16px; 
        background: var(--card-bg);
        color: var(--text-color);
      }
      .form-input:focus { outline: none; border-color: var(--accent-color); }
      select.form-input { cursor: pointer; }
      .search-btn { 
        padding: 12px 20px; 
        background: var(--accent-color); 
        color: white; 
        border: none; 
        border-radius: 6px; 
        cursor: pointer; 
        font-size: 16px; 
      }
      .search-btn:hover { background: #00cccc; }
      .search-filters { 
        display: grid; 
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); 
        gap: 10px; 
        margin-bottom: 15px; 
        padding: 15px; 
        background: var(--card-bg); 
        border-radius: 6px; 
        border: 1px solid var(--border-color); 
      }
      .filter-select { 
        padding: 8px; 
        border: 1px solid var(--border-color); 
        border-radius: 4px; 
        background: var(--card-bg);
        color: var(--text-color);
      }
      
      /* People Search Styles */
      .people-search-container {
        grid-column: 1 / -1;
        margin-top: 10px;
        padding: 15px;
        background: var(--card-bg);
        border: 1px solid var(--border-color);
        border-radius: 6px;
      }
      
      .people-search-label {
        display: block;
        font-weight: 600;
        margin-bottom: 8px;
        color: var(--text-color);
      }
      
      .people-search-input-group {
        display: flex;
        gap: 8px;
        margin-bottom: 10px;
      }
      
      .people-search-input {
        flex: 1;
        padding: 8px;
        border: 1px solid var(--border-color);
        border-radius: 4px;
        background: var(--card-bg);
        color: var(--text-color);
        font-size: 14px;
      }
      
      .people-search-input:focus {
        outline: none;
        border-color: var(--accent-color);
      }
      
      .people-search-results {
        max-height: 200px;
        overflow-y: auto;
        border: 1px solid var(--border-color);
        border-radius: 4px;
        background: var(--card-bg);
        margin-bottom: 10px;
      }
      
      .people-search-result {
        padding: 8px 12px;
        cursor: pointer;
        border-bottom: 1px solid var(--border-color);
        transition: background-color 0.2s;
      }
      
      .people-search-result:hover {
        background: var(--accent-color);
        color: white;
      }
      
      .people-search-result:last-child {
        border-bottom: none;
      }
      
      .people-search-result-name {
        font-weight: 500;
        margin-bottom: 2px;
      }
      
      .people-search-result-department {
        font-size: 12px;
        color: var(--text-color);
        opacity: 0.7;
      }
      
      .selected-people {
        display: flex;
        flex-wrap: wrap;
        gap: 8px;
        margin-top: 10px;
      }
      
      .selected-person {
        display: flex;
        align-items: center;
        gap: 6px;
        padding: 4px 8px;
        background: var(--accent-color);
        color: white;
        border-radius: 16px;
        font-size: 12px;
      }
      
      .selected-person-remove {
        background: none;
        border: none;
        color: white;
        cursor: pointer;
        font-size: 14px;
        padding: 0;
        margin-left: 4px;
      }
      
      .selected-person-remove:hover {
        color: #ff6b6b;
      }
      
      /* Component: GenreTag */
      .genre-tag {
        display: inline-block;
        padding: 4px 12px;
        background: var(--accent-color);
        color: white;
        border-radius: 16px;
        font-size: 12px;
        font-weight: 500;
        margin-right: 6px;
        margin-bottom: 6px;
        transition: all 0.2s;
      }
      
      .genre-tag--small {
        padding: 2px 8px;
        font-size: 10px;
      }
      
      .genre-tag--large {
        padding: 6px 16px;
        font-size: 14px;
      }
      
      .genre-tag--clickable {
        cursor: pointer;
        text-decoration: none;
      }
      
      .genre-tag--clickable:hover {
        background: var(--accent-secondary);
        transform: translateY(-1px);
      }
      
      /* Component: PersonPill */
      .person-pill {
        display: inline-flex;
        align-items: center;
        gap: 8px;
        padding: 6px 12px;
        background: var(--background-secondary);
        border: 1px solid var(--border-color);
        border-radius: 20px;
        font-size: 14px;
        margin-right: 8px;
        margin-bottom: 8px;
        transition: all 0.2s;
      }
      
      .person-pill--small {
        padding: 4px 8px;
        font-size: 12px;
        gap: 4px;
      }
      
      .person-pill--large {
        padding: 8px 16px;
        font-size: 16px;
        gap: 10px;
      }
      
      .person-pill--clickable {
        cursor: pointer;
        text-decoration: none;
        color: var(--text-primary);
      }
      
      .person-pill--clickable:hover {
        border-color: var(--accent-color);
        background: rgba(0, 255, 255, 0.1);
        transform: translateY(-1px);
      }
      
      .person-pill--removable {
        padding-right: 8px;
      }
      
      .person-avatar {
        width: 24px;
        height: 24px;
        border-radius: 50%;
        object-fit: cover;
      }
      
      .person-avatar-placeholder {
        width: 24px;
        height: 24px;
        border-radius: 50%;
        background: var(--accent-color);
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 600;
        font-size: 12px;
      }
      
      .person-info {
        display: flex;
        flex-direction: column;
        gap: 2px;
      }
      
      .person-name {
        font-weight: 500;
        color: var(--text-primary);
      }
      
      .person-job {
        font-size: 11px;
        color: var(--text-secondary);
      }
      
      .person-remove-btn {
        background: none;
        border: none;
        color: var(--text-secondary);
        font-size: 20px;
        cursor: pointer;
        padding: 0;
        margin-left: 4px;
        line-height: 1;
        transition: color 0.2s;
      }
      
      .person-remove-btn:hover {
        color: #ff6b6b;
      }
      
      /* Component: SerendipityPrompt */
      .serendipity-prompt {
        background: linear-gradient(135deg, rgba(0, 255, 255, 0.1) 0%, rgba(138, 43, 226, 0.1) 100%);
        border: 2px dashed var(--accent-color);
        border-radius: 12px;
        padding: 2rem;
        margin: 2rem 0;
        display: flex;
        gap: 1.5rem;
        align-items: flex-start;
      }
      
      .serendipity-prompt--compact {
        padding: 1rem;
        gap: 1rem;
      }
      
      .serendipity-prompt--banner {
        padding: 1.5rem;
        margin: 1rem 0;
      }
      
      .serendipity-prompt-icon {
        font-size: 3rem;
        line-height: 1;
      }
      
      .serendipity-prompt-content {
        flex: 1;
      }
      
      .serendipity-prompt-title {
        margin: 0 0 0.5rem 0;
        font-size: 1.5rem;
        color: var(--text-primary);
      }
      
      .serendipity-prompt-text {
        margin: 0 0 1rem 0;
        color: var(--text-secondary);
        line-height: 1.6;
      }
      
      .serendipity-prompt-subtitle {
        font-size: 0.9rem;
        font-style: italic;
      }
      
      .serendipity-prompt-actions {
        display: flex;
        gap: 0.75rem;
        margin-bottom: 1rem;
        flex-wrap: wrap;
      }
      
      .btn--serendipity {
        background: var(--accent-color);
        color: white;
        border: none;
      }
      
      .btn--serendipity:hover {
        background: var(--accent-secondary);
      }
      
      .serendipity-prompt-hint {
        margin: 0;
        font-size: 0.85rem;
        color: var(--text-secondary);
        padding: 0.75rem;
        background: var(--background-secondary);
        border-radius: 6px;
      }
      
      .hint-low,
      .hint-obscure {
        font-weight: 600;
        color: var(--accent-color);
      }
      
      .search-results { margin-top: 30px; }
      .results-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); gap: 20px; margin-top: 20px; }
      .movie-card { 
        background: var(--card-bg); 
        border: 1px solid var(--border-color); 
        border-radius: 8px; 
        overflow: hidden; 
        transition: transform 0.2s; 
      }
      .movie-card:hover { transform: translateY(-2px); box-shadow: 0 4px 12px rgba(0,0,0,0.15); }
      .movie-poster { 
        width: 100%; 
        height: 200px; 
        background: #eee; 
        display: flex; 
        align-items: center; 
        justify-content: center; 
        color: #666; 
      }
      .movie-info { padding: 15px; }
      .movie-title { 
        font-size: 18px; 
        font-weight: bold; 
        margin: 0 0 5px 0; 
        color: var(--text-color);
      }
      .movie-year { color: #666; font-size: 14px; margin-bottom: 5px; }
      .movie-rating { color: var(--accent-color); font-size: 14px; margin-bottom: 5px; }
      .movie-genres { color: #666; font-size: 14px; margin-bottom: 10px; }
      .movie-overview { 
        color: var(--text-color); 
        font-size: 14px; 
        line-height: 1.4; 
        margin-bottom: 15px; 
      }
      .movie-actions { display: flex; gap: 0.5rem; flex-wrap: wrap; margin-top: 0.75rem; }
      .btn { 
        padding: 8px 16px; 
        border: none; 
        border-radius: 4px; 
        cursor: pointer; 
        font-size: 14px; 
        transition: all 0.3s; 
        text-decoration: none;
        display: inline-block;
      }
      
      /* Loading spinner */
      .spinner {
        width: 18px;
        height: 18px;
        border: 3px solid rgba(255, 255, 255, 0.3);
        border-top-color: white;
        border-radius: 50%;
        animation: spin 0.8s linear infinite;
        display: inline-block;
      }
      
      @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
      }
      
      .btn:disabled {
        opacity: 0.7;
        cursor: not-allowed;
      }
      .btn:visited,
      .btn:link,
      .btn:active {
        opacity: 1 !important;
        text-decoration: none;
      }
      .btn--primary { background: #00ffff; color: white; }
      .btn--primary:visited { background: #00ffff; color: white; }
      .btn--ghost { background: transparent; color: #666; border: 1px solid var(--border-color); }
      .btn--ghost:visited { background: transparent; color: #666; }
      .btn--secondary { background: transparent; color: var(--text-color); border: 2px solid var(--accent-color); }
      .btn--secondary:visited { background: transparent; color: var(--text-color); }
      .btn--watched { background: #4a90e2; color: white; }
      .btn--watched:visited { background: #4a90e2; color: white; }
      .btn--success { background: #4caf50; color: white; }
      .btn--success:visited { background: #4caf50; color: white; }
      .btn--small { padding: 6px 12px; font-size: 12px; }
      .btn--tiny { padding: 0.5rem 0.75rem; font-size: 0.85rem; }
      .btn:hover { opacity: 0.8; transform: translateY(-1px); }
      .loading, .error, .no-results { text-align: center; padding: 30px; color: #666; font-style: italic; }
      .error { color: #ff0000; }
      .demo-info { 
        margin-top: 30px; 
        padding: 20px; 
        background: var(--card-bg); 
        border-radius: 8px; 
        border: 1px solid var(--border-color); 
      }
      .demo-info h2 { margin-bottom: 15px; color: var(--text-color); }
      .demo-info ul { list-style: none; padding: 0; margin: 0; }
             .demo-info li { padding: 5px 0; color: #666; }
             
             /* People search styles */
             .people-search-container { margin-bottom: 20px; }
             .people-results { margin-top: 15px; }
             .person-result { 
               padding: 10px; 
               border: 1px solid var(--border-color); 
               border-radius: 4px; 
               margin-bottom: 5px; 
               cursor: pointer; 
               background: var(--card-bg);
               transition: background-color 0.2s;
             }
             .person-result:hover { background: rgba(0, 255, 255, 0.1); }
             .selected-people { margin-top: 20px; }
             .selected-person { 
               display: flex; 
               justify-content: space-between; 
               align-items: center; 
               padding: 8px; 
               background: var(--card-bg); 
               border: 1px solid var(--border-color); 
               border-radius: 4px; 
               margin-bottom: 5px; 
             }
             .no-selection { color: #666; font-style: italic; }
    </style>
  </head>
  <body>
    <!-- SVG Definitions for Gradient -->
    <svg width="0" height="0" style="position: absolute;">
      <defs>
        <linearGradient id="carGradient" x1="0%" y1="0%" x2="100%" y2="100%">
          <stop offset="0%" style="stop-color:#b026ff;stop-opacity:1" />
          <stop offset="100%" style="stop-color:#daa520;stop-opacity:1" />
        </linearGradient>
      </defs>
    </svg>
    
    <!-- Navigation Bar -->
    <nav class="navbar">
      <div class="navbar-container">
        <a href="<%= root_path %>" class="navbar-brand">
          <svg class="navbar-brand-icon" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <!-- Film Slate / Clapperboard -->
            <!-- Slate top (clapper) -->
            <path d="M2 4 L22 4 L20 8 L4 8 Z" fill="url(#carGradient)"/>
            <!-- Clapper stripes -->
            <rect x="5" y="4" width="2" height="4" fill="#1a1a1a" opacity="0.6"/>
            <rect x="10" y="4" width="2" height="4" fill="#1a1a1a" opacity="0.6"/>
            <rect x="15" y="4" width="2" height="4" fill="#1a1a1a" opacity="0.6"/>
            <!-- Slate body -->
            <rect x="4" y="8" width="16" height="12" rx="1" fill="url(#carGradient)"/>
            <!-- Slate lines (for text) -->
            <line x1="6" y1="11" x2="18" y2="11" stroke="#1a1a1a" stroke-width="0.5" opacity="0.4"/>
            <line x1="6" y1="13.5" x2="18" y2="13.5" stroke="#1a1a1a" stroke-width="0.5" opacity="0.4"/>
            <line x1="6" y1="16" x2="18" y2="16" stroke="#1a1a1a" stroke-width="0.5" opacity="0.4"/>
          </svg>
          <span class="navbar-brand-text" style="font-family: 'Satisfy', cursive !important;">Cinema List Derby</span>
        </a>
        <ul class="navbar-nav">
          <li><a href="<%= recommendations_path %>" class="nav-link">⭐ Recommendations</a></li>
          <li><a href="<%= lists_path %>" class="nav-link">📋 My Lists</a></li>
          <li><a href="<%= my_reviews_path %>" class="nav-link">✍️ My Reviews</a></li>
          <li><a href="/watched_movies" class="nav-link">👁️ Watched</a></li>
          <% if logged_in? %>
            <li class="user-indicator">
              <div class="user-menu-toggle" onclick="toggleUserMenu()">
                👤 <%= current_user.display_name %> ▼
              </div>
              <div class="user-dropdown" id="userDropdown">
                <div class="user-dropdown-header">
                  <%= current_user.display_name %>
                </div>
                <a href="/profile">👤 My Profile</a>
                <a href="/onboarding">⚙️ Edit Preferences</a>
                <%= button_to "🚪 Sign Out", "/signout", method: :delete, form: { style: "margin: 0;" } %>
              </div>
            </li>
          <% end %>
        </ul>
      </div>
    </nav>
    
    <!-- Main Content -->
    <div class="main-content">
      <%= yield %>
    </div>
    <script>
      // Simple Stimulus-like functionality for testing
      document.addEventListener('DOMContentLoaded', function() {
        console.log('DOM loaded, setting up event listeners');
        
        // Movie search functionality
        const searchForm = document.querySelector('[data-movie-search-target="form"]');
        console.log('Search form found:', searchForm);
        if (searchForm) {
          searchForm.addEventListener('submit', handleSearch);
          console.log('Search form event listener added');
        }
        
        const toggleFiltersBtn = document.querySelector('[data-movie-search-target="toggle"]');
        console.log('Toggle filters button found:', toggleFiltersBtn);
        if (toggleFiltersBtn) {
          toggleFiltersBtn.addEventListener('click', toggleFilters);
          console.log('Toggle filters event listener added');
        }
        
        console.log('Loading filter options...');
        loadFilterOptions();
      });

      // Debounced search functionality
      let searchTimeout;
      let isSearching = false;
      let currentSearchQuery = '';
      let currentSearchFilters = {};
      let currentPage = 1;
      let totalPages = 1;

      async function handleSearch(event) {
        console.log('handleSearch called!', event);
        event.preventDefault();
        
        const query = document.querySelector('[data-movie-search-target="query"]').value.trim();
        if (!query) {
          console.log('No query provided');
          return;
        }

        // Clear previous timeout
        if (searchTimeout) {
          clearTimeout(searchTimeout);
        }

        // Debounce search by 500ms
        searchTimeout = setTimeout(async () => {
          currentSearchQuery = query;
          currentSearchFilters = getFilters();
          currentPage = 1;
          await performSearch(query, currentSearchFilters, 1, false);
        }, 500);
      }

      async function performSearch(query, filters, page = 1, append = false) {
        if (isSearching) return;
        
        console.log('Searching for:', query, 'page:', page);
        isSearching = true;
        if (!append) {
          showLoading();
        }

        try {
          const url = `/movies/search?q=${encodeURIComponent(query)}&${buildQueryString(filters)}&page=${page}`;
          console.log('Fetching URL:', url);
          
          const response = await fetch(url);
          console.log('Response status:', response.status);
          
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          
          const data = await response.json();
          console.log('Response data:', data);

          if (data.success) {
            currentPage = data.current_page || page;
            totalPages = data.total_pages || 1;
            displayResults(data.results, append);
          } else {
            showError(data.error || 'Search failed');
          }
        } catch (error) {
          console.error('Search error:', error);
          showError(`Search failed: ${error.message}`);
        } finally {
          isSearching = false;
        }
      }

      async function loadMoreResults() {
        if (currentPage < totalPages) {
          // Find the load more button and show loading state
          const loadMoreBtn = document.querySelector('.load-more-btn');
          if (loadMoreBtn) {
            loadMoreBtn.disabled = true;
            loadMoreBtn.innerHTML = `
              <span class="spinner"></span>
              <span>Loading...</span>
            `;
          }
          
          await performSearch(currentSearchQuery, currentSearchFilters, currentPage + 1, true);
        }
      }

      // Fallback: if JavaScript fails, let the form submit normally
      function allowFormSubmit() {
        const form = document.querySelector('[data-movie-search-target="form"]');
        if (form) {
          form.removeEventListener('submit', handleSearch);
          console.log('Removed JavaScript handler, allowing normal form submission');
        }
      }

      function getFilters() {
        return {
          genre: document.getElementById('filter-genre')?.value || '',
          year: document.getElementById('filter-year')?.value || '',
          language: document.getElementById('filter-language')?.value || '',
          country: document.getElementById('filter-country')?.value || '',
          people: selectedPeople.map(p => p.tmdb_id).join(',')
        };
      }

      function buildQueryString(filters) {
        return Object.entries(filters)
          .filter(([_, value]) => value)
          .map(([key, value]) => `${key}=${encodeURIComponent(value)}`)
          .join('&');
      }

      function displayResults(results, append = false) {
        const container = document.querySelector('[data-movie-search-target="container"]');
        
        // Remove load more button if it exists
        const existingLoadMore = container.querySelector('.load-more-container');
        if (existingLoadMore) {
          existingLoadMore.remove();
        }

        if (!append) {
          container.innerHTML = '';
        }

        if (results.length === 0 && !append) {
          container.innerHTML = '<p class="no-results">No movies found. Try a different search term.</p>';
          document.querySelector('[data-movie-search-target="results"]').style.display = 'block';
          return;
        }

        results.forEach(movie => {
          const movieCard = createMovieCard(movie);
          container.appendChild(movieCard);
        });

        // Add "Load More" button if there are more pages
        if (currentPage < totalPages) {
          const loadMoreContainer = document.createElement('div');
          loadMoreContainer.className = 'load-more-container';
          loadMoreContainer.style.cssText = 'text-align: center; padding: 30px; margin-top: 20px;';
          loadMoreContainer.innerHTML = `
            <button onclick="loadMoreResults()" class="btn btn--primary btn--large load-more-btn" style="min-width: 200px; display: flex; align-items: center; justify-content: center; gap: 10px; margin: 0 auto;">
              <span>Load More Results (Page ${currentPage + 1} of ${totalPages})</span>
            </button>
          `;
          container.appendChild(loadMoreContainer);
        }

        document.querySelector('[data-movie-search-target="results"]').style.display = 'block';
      }

      function createMovieCard(movie) {
        const card = document.createElement('div');
        card.className = 'movie-card';
        card.setAttribute('data-movie-id', movie.id);
        
        const posterUrl = movie.poster_path 
          ? `https://image.tmdb.org/t/p/w300${movie.poster_path}`
          : '';

        card.innerHTML = `
          <div class="movie-poster">
            ${posterUrl ? `<img src="${posterUrl}" alt="${movie.title}" loading="lazy" style="width: 100%; height: 100%; object-fit: cover;">` : '<div style="display: flex; align-items: center; justify-content: center; height: 100%; color: #666;">No Image</div>'}
          </div>
          <div class="movie-info">
            <h3 class="movie-title">${movie.title}</h3>
            <p class="movie-year">${movie.release_date ? new Date(movie.release_date).getFullYear() : 'N/A'}</p>
            <p class="movie-rating">⭐ ${parseFloat(movie.vote_average).toFixed(1)} (${movie.vote_count} votes)</p>
            <p class="movie-genres">${movie.genres.join(', ')}</p>
            <p class="movie-overview">${movie.overview ? movie.overview.substring(0, 150) + '...' : 'No overview available'}</p>
            <div class="movie-actions">
              <button class="btn ${movie.watched ? 'btn--success' : 'btn--watched'} btn--small" 
                      onclick="toggleWatched(${movie.id}, ${!movie.watched})" 
                      data-watched-btn="${movie.id}">
                ${movie.watched ? '✅ Watched' : '👁️ Mark Watched'}
              </button>
              ${movie.watched ? `<button class="btn btn--secondary btn--small" onclick="writeReview(${movie.id})" data-review-btn="${movie.id}">
                ✍️ Write Review
              </button>` : ''}
              <button class="btn btn--primary btn--small" onclick="showListPicker(${movie.id})">
                Add to List
              </button>
              <button class="btn btn--ghost btn--small" onclick="viewDetails(${movie.id})">
                Details
              </button>
            </div>
          </div>
        `;

        return card;
      }

      function addToList(movieId) {
        console.log('Add to list:', movieId);
        alert('Add to list functionality coming soon!');
      }

      function viewDetails(movieId) {
        window.location.href = `/movies/${movieId}`;
      }

      function writeReview(movieId) {
        window.location.href = `/movies/${movieId}/reviews/new`;
      }

      // Toggle watched status for a movie
      async function toggleWatched(movieId, watched) {
        const method = watched ? 'POST' : 'DELETE';
        const url = watched ? '/watched_movies' : `/watched_movies/${movieId}`;
        
        try {
          const response = await fetch(url, {
            method: method,
            headers: {
              'Content-Type': 'application/json',
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
            },
            body: JSON.stringify({ movie_id: movieId })
          });
          
          const data = await response.json();
          
          if (data.success) {
            showNotification(data.message);
            updateWatchedButton(movieId, data.watched);
            updateReviewButton(movieId, data.watched);
          } else {
            showNotification(data.error || 'Failed to update watched status', 'error');
          }
        } catch (error) {
          console.error('Error updating watched status:', error);
          showNotification('Failed to update watched status', 'error');
        }
      }

      // Update the watched button UI
      function updateWatchedButton(movieId, watched) {
        const button = document.querySelector(`[data-watched-btn="${movieId}"]`);
        if (button) {
          if (watched) {
            button.textContent = '✅ Watched';
            button.className = 'btn btn--success btn--small';
            button.onclick = function() { toggleWatched(movieId, false); };
          } else {
            button.textContent = '👁️ Mark Watched';
            button.className = 'btn btn--watched btn--small';
            button.onclick = function() { toggleWatched(movieId, true); };
          }
        }
      }

      // Update the review button visibility based on watched status
      function updateReviewButton(movieId, watched) {
        // Find the movie card
        const movieCard = document.querySelector(`[data-movie-id="${movieId}"]`);
        if (!movieCard) return;

        const actionsDiv = movieCard.querySelector('.movie-actions');
        if (!actionsDiv) return;

        // Remove existing review button if any
        const existingReviewBtn = actionsDiv.querySelector('[data-review-btn]');
        if (existingReviewBtn) {
          existingReviewBtn.remove();
        }

        // Add review button if watched
        if (watched) {
          const watchedBtn = actionsDiv.querySelector(`[data-watched-btn="${movieId}"]`);
          if (watchedBtn) {
            const reviewBtn = document.createElement('button');
            reviewBtn.className = 'btn btn--secondary btn--small';
            reviewBtn.setAttribute('data-review-btn', movieId);
            reviewBtn.onclick = function() { writeReview(movieId); };
            reviewBtn.innerHTML = '✍️ Write Review';
            
            // Insert after the watched button
            watchedBtn.insertAdjacentElement('afterend', reviewBtn);
          }
        }
      }

      function toggleFilters() {
        const filters = document.querySelector('[data-movie-search-target="filters"]');
        const toggle = document.querySelector('[data-movie-search-target="toggle"]');
        
        if (filters.style.display === 'none') {
          filters.style.display = 'block';
          toggle.textContent = 'Hide Filters';
        } else {
          filters.style.display = 'none';
          toggle.textContent = 'Advanced Filters';
        }
      }

      async function loadFilterOptions() {
        try {
          console.log('=== LOADING FILTER OPTIONS ===');
          
          // Load genres
          console.log('1. Fetching genres from /movies/genres...');
          const genresResponse = await fetch('/movies/genres');
          console.log('   Genres response status:', genresResponse.status);
          console.log('   Genres response ok:', genresResponse.ok);
          
          if (!genresResponse.ok) {
            throw new Error(`Genres API failed: ${genresResponse.status}`);
          }
          
          const genresData = await genresResponse.json();
          console.log('   Genres data received:', genresData);
          console.log('   Genres success:', genresData.success);
          console.log('   Genres count:', genresData.genres?.length);
          
          if (genresData.success && genresData.genres) {
            console.log('   Populating genre select...');
            populateSelect('filter-genre', genresData.genres);
            console.log('   ✅ Genres populated successfully');
          } else {
            console.log('   ❌ Genres data not successful or empty');
          }

          // Load languages
          console.log('2. Fetching languages from /movies/languages...');
          const languagesResponse = await fetch('/movies/languages');
          console.log('   Languages response status:', languagesResponse.status);
          console.log('   Languages response ok:', languagesResponse.ok);
          
          if (!languagesResponse.ok) {
            throw new Error(`Languages API failed: ${languagesResponse.status}`);
          }
          
          const languagesData = await languagesResponse.json();
          console.log('   Languages data received:', languagesData);
          console.log('   Languages success:', languagesData.success);
          console.log('   Languages count:', languagesData.languages?.length);
          
          if (languagesData.success && languagesData.languages) {
            console.log('   Populating language select...');
            populateSelect('filter-language', languagesData.languages);
            console.log('   ✅ Languages populated successfully');
          } else {
            console.log('   ❌ Languages data not successful or empty');
          }

          // Load countries
          console.log('3. Fetching countries from /movies/countries...');
          const countriesResponse = await fetch('/movies/countries');
          console.log('   Countries response status:', countriesResponse.status);
          console.log('   Countries response ok:', countriesResponse.ok);
          
          if (!countriesResponse.ok) {
            throw new Error(`Countries API failed: ${countriesResponse.status}`);
          }
          
          const countriesData = await countriesResponse.json();
          console.log('   Countries data received:', countriesData);
          console.log('   Countries success:', countriesData.success);
          console.log('   Countries count:', countriesData.countries?.length);
          
          if (countriesData.success && countriesData.countries) {
            console.log('   Populating country select...');
            populateSelect('filter-country', countriesData.countries);
            console.log('   ✅ Countries populated successfully');
          } else {
            console.log('   ❌ Countries data not successful or empty');
          }

          // Add year options (decades)
          console.log('4. Populating decade options...');
          populateYearOptions();
          console.log('   ✅ Decade options populated successfully');
          
          console.log('=== FILTER OPTIONS LOADING COMPLETE ===');
        } catch (error) {
          console.error('❌ Failed to load filter options:', error);
          console.error('Error details:', error.message);
        }
      }

      function populateSelect(selectId, options) {
        const select = document.getElementById(selectId);
        if (!select) {
          console.log('Select element not found:', selectId);
          return;
        }

        console.log('Populating select:', selectId, 'with', options.length, 'options');

        // Clear existing options except the first one
        while (select.children.length > 1) {
          select.removeChild(select.lastChild);
        }

        options.forEach(option => {
          const optionElement = document.createElement('option');
          optionElement.value = option.id || option.code;
          optionElement.textContent = option.name;
          select.appendChild(optionElement);
        });
        
        console.log('Populated select:', selectId, 'with', select.children.length, 'options');
      }

      function populateYearOptions() {
        const yearSelect = document.getElementById('filter-year');
        if (!yearSelect) return;

        console.log('Populating decade options...');
        
        // Add decades from 1920s to 2020s
        const decades = [
          { value: '2020s', label: '2020s' },
          { value: '2010s', label: '2010s' },
          { value: '2000s', label: '2000s' },
          { value: '1990s', label: '1990s' },
          { value: '1980s', label: '1980s' },
          { value: '1970s', label: '1970s' },
          { value: '1960s', label: '1960s' },
          { value: '1950s', label: '1950s' },
          { value: '1940s', label: '1940s' },
          { value: '1930s', label: '1930s' },
          { value: '1920s', label: '1920s' }
        ];

        decades.forEach(decade => {
          const option = document.createElement('option');
          option.value = decade.value;
          option.textContent = decade.label;
          yearSelect.appendChild(option);
        });
        
        console.log('Populated decade options:', yearSelect.children.length);
      }

      function showLoading() {
        const container = document.querySelector('[data-movie-search-target="container"]');
        container.innerHTML = '<div class="loading">Searching movies...</div>';
        document.querySelector('[data-movie-search-target="results"]').style.display = 'block';
      }

             function showError(message) {
               const container = document.querySelector('[data-movie-search-target="container"]');
               container.innerHTML = `<div class="error">${message}</div>`;
               document.querySelector('[data-movie-search-target="results"]').style.display = 'block';
             }

             // Genre selection limit
             function limitGenres(checkbox) {
               const checkedBoxes = document.querySelectorAll('input[name="genre_ids[]"]:checked');
               if (checkedBoxes.length > 3) {
                 checkbox.checked = false;
                 alert('You can only select up to 3 genres.');
               }
             }

             // Country selection limit
             function limitCountries(checkbox) {
               const checkedBoxes = document.querySelectorAll('input[name="country_codes[]"]:checked');
               if (checkedBoxes.length > 3) {
                 checkbox.checked = false;
                 alert('You can only select up to 3 countries.');
               }
             }

             // Decade selection limit
             function limitDecades(checkbox) {
               const checkedBoxes = document.querySelectorAll('input[name="decades[]"]:checked');
               if (checkedBoxes.length > 3) {
                 checkbox.checked = false;
                 alert('You can only select up to 3 decades.');
               }
             }

             // People search functionality
             let selectedPeople = [];
             const maxPeople = 10; // Hidden limit to prevent abuse
             let peopleSearchTimeout;

             // Debounced people search
             function setupPeopleSearch() {
               const peopleSearchInput = document.getElementById('people-search-input');
               const peopleSearchBtn = document.getElementById('people-search-btn');
               
               if (peopleSearchInput) {
                 peopleSearchInput.addEventListener('input', function() {
                   const query = this.value.trim();
                   if (query.length < 2) {
                     hidePeopleResults();
                     return;
                   }
                   
                   // Clear previous timeout
                   if (peopleSearchTimeout) {
                     clearTimeout(peopleSearchTimeout);
                   }
                   
                   // Debounce search by 300ms
                   peopleSearchTimeout = setTimeout(() => {
                     searchPeople(query);
                   }, 300);
                 });
                 
                 // Prevent form submission on Enter
                 peopleSearchInput.addEventListener('keypress', function(e) {
                   if (e.key === 'Enter') {
                     e.preventDefault();
                     const query = this.value.trim();
                     if (query.length >= 2) {
                       searchPeople(query);
                     }
                   }
                 });
               }
               
               if (peopleSearchBtn) {
                 peopleSearchBtn.addEventListener('click', function() {
                   const query = peopleSearchInput.value.trim();
                   if (query.length >= 2) {
                     searchPeople(query);
                   }
                 });
               }
             }

             async function searchPeople(query) {
               if (!query || query.length < 2) {
                 hidePeopleResults();
                 return;
               }

               const resultsDiv = document.getElementById('people-search-results');
               resultsDiv.innerHTML = '<div class="loading">Searching people...</div>';
               resultsDiv.style.display = 'block';

               try {
                 const response = await fetch(`/movies/search_people?q=${encodeURIComponent(query)}&limit=10`);
                 const data = await response.json();
                 
                 if (data.success) {
                   displayPeopleResults(data.results);
                 } else {
                   resultsDiv.innerHTML = '<div class="error">No people found</div>';
                 }
               } catch (error) {
                 console.error('People search error:', error);
                 resultsDiv.innerHTML = '<div class="error">Search failed</div>';
               }
             }

             function displayPeopleResults(people) {
               const resultsDiv = document.getElementById('people-search-results');
               
               if (!people || people.length === 0) {
                 resultsDiv.innerHTML = '<div class="no-results">No people found</div>';
                 return;
               }
               
               const resultsHTML = people.map(person => `
                 <div class="people-search-result" onclick="selectPerson(${person.tmdb_id}, '${person.name}', '${person.known_for_department || 'Unknown'}')">
                   <div class="people-search-result-name">${person.name}</div>
                   <div class="people-search-result-department">${person.known_for_department || 'Unknown'}</div>
                 </div>
               `).join('');
               
               resultsDiv.innerHTML = resultsHTML;
             }

            function selectPerson(tmdbId, name, department) {
              // Check if already selected
              if (selectedPeople.some(p => p.tmdb_id === tmdbId)) {
                return;
              }
              
              // Check limit
              if (selectedPeople.length >= maxPeople) {
                alert(`You can only select up to ${maxPeople} people.`);
                return;
              }
              
              // Add to selected people
              selectedPeople.push({ tmdb_id: tmdbId, name: name, department: department });
              
              // Update display
              updateSelectedPeopleDisplay();
              updateHiddenField();
              
              // Clear search input and hide results
              document.getElementById('people-search-input').value = '';
              hidePeopleResults();
            }

            function removePerson(tmdbId) {
              selectedPeople = selectedPeople.filter(p => p.tmdb_id !== tmdbId);
              updateSelectedPeopleDisplay();
              updateHiddenField();
            }
            
            function updateHiddenField() {
              const hiddenField = document.getElementById('person_tmdb_ids');
              if (hiddenField) {
                hiddenField.value = selectedPeople.map(p => p.tmdb_id).join(',');
              }
            }

             function updateSelectedPeopleDisplay() {
               const container = document.getElementById('selected-people');
               
               if (selectedPeople.length === 0) {
                 container.innerHTML = '';
                 return;
               }
               
               const peopleHTML = selectedPeople.map(person => `
                 <div class="selected-person">
                   <span>${person.name}</span>
                   <button type="button" class="selected-person-remove" onclick="removePerson(${person.tmdb_id})">×</button>
                 </div>
               `).join('');
               
               container.innerHTML = peopleHTML;
             }

             function hidePeopleResults() {
               const resultsDiv = document.getElementById('people-search-results');
               if (resultsDiv) {
                 resultsDiv.style.display = 'none';
               }
             }

             // Initialize people search when DOM is loaded
             document.addEventListener('DOMContentLoaded', function() {
               setupPeopleSearch();
             });

      // List management functionality
      function addMovieToList(movieId, listId) {
        fetch(`/lists/${listId}/list_movies`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content
          },
          body: JSON.stringify({ movie_id: movieId })
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            showNotification(data.message, 'success');
          } else {
            showNotification(data.error || 'Failed to add movie to list', 'error');
          }
        })
        .catch(error => {
          console.error('Error:', error);
          showNotification('Failed to add movie to list', 'error');
        });
      }

      function removeMovieFromList(movieId, listId) {
        if (!confirm('Are you sure you want to remove this movie from the list?')) {
          return;
        }

        fetch(`/lists/${listId}/list_movies/${movieId}`, {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content
          }
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            showNotification(data.message, 'success');
            // Remove the movie card from the DOM
            const movieCard = document.querySelector(`[data-movie-id="${movieId}"]`);
            if (movieCard) {
              movieCard.remove();
            }
          } else {
            showNotification(data.error || 'Failed to remove movie from list', 'error');
          }
        })
        .catch(error => {
          console.error('Error:', error);
          showNotification('Failed to remove movie from list', 'error');
        });
      }

      function showNotification(message, type = 'info') {
        // Create notification element
        const notification = document.createElement('div');
        notification.className = `notification notification--${type}`;
        notification.textContent = message;
        
        // Add styles
        notification.style.cssText = `
          position: fixed;
          top: 20px;
          right: 20px;
          padding: 1rem 1.5rem;
          border-radius: 8px;
          color: white;
          font-weight: 500;
          z-index: 1000;
          max-width: 400px;
          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
          transform: translateX(100%);
          transition: transform 0.3s ease;
        `;

        if (type === 'success') {
          notification.style.background = '#10b981';
        } else if (type === 'error') {
          notification.style.background = '#ef4444';
        } else {
          notification.style.background = '#3b82f6';
        }

        document.body.appendChild(notification);

        // Animate in
        setTimeout(() => {
          notification.style.transform = 'translateX(0)';
        }, 100);

        // Remove after 3 seconds
        setTimeout(() => {
          notification.style.transform = 'translateX(100%)';
          setTimeout(() => {
            if (notification.parentNode) {
              notification.parentNode.removeChild(notification);
            }
          }, 300);
        }, 3000);
      }

      // List picker functionality
      let currentMovieId = null;
      let userLists = [];

      function showListPicker(movieId) {
        currentMovieId = movieId;
        
        // Fetch user's lists
        fetch('/lists.json')
          .then(response => response.json())
          .then(lists => {
            userLists = lists;
            displayListPicker();
          })
          .catch(error => {
            console.error('Error fetching lists:', error);
            showNotification('Failed to load lists', 'error');
          });
      }

      function displayListPicker() {
        // Create modal overlay
        const modal = document.createElement('div');
        modal.id = 'list-picker-modal';
        modal.style.cssText = `
          position: fixed;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          background: rgba(0, 0, 0, 0.5);
          display: flex;
          align-items: center;
          justify-content: center;
          z-index: 1000;
        `;

        // Create modal content
        const modalContent = document.createElement('div');
        modalContent.style.cssText = `
          background: var(--card-bg, #2d2d2d);
          border: 2px solid var(--accent-color, #00ffff);
          border-radius: 12px;
          padding: 2rem;
          max-width: 500px;
          width: 90%;
          max-height: 80vh;
          overflow-y: auto;
          box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.5);
        `;

        modalContent.innerHTML = `
          <h2 style="margin: 0 0 0.5rem 0; color: var(--text-primary); font-size: 1.5rem;">Add to List</h2>
          <p style="color: var(--text-secondary); margin-bottom: 1rem; font-size: 0.9rem;">Click a list to add this movie:</p>
          
          <button onclick="createNewList()" style="
            width: 100%;
            padding: 1rem;
            background: var(--accent-primary);
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
            font-size: 1rem;
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            transition: all 0.2s ease;
          " onmouseover="this.style.transform='scale(1.02)'; this.style.boxShadow='0 4px 12px rgba(0, 255, 255, 0.3)';" onmouseout="this.style.transform='scale(1)'; this.style.boxShadow='none';">
            <span style="font-size: 1.2rem;">+</span> Create New List
          </button>
          
          <div id="lists-container" style="margin-bottom: 1rem;"></div>
          
          <div style="display: flex; justify-content: center;">
            <button onclick="closeListPicker()" style="
              padding: 0.5rem 1.5rem;
              background: transparent;
              color: var(--text-secondary);
              border: 1px solid var(--border-color);
              border-radius: 8px;
              cursor: pointer;
              font-size: 0.9rem;
            ">Cancel</button>
          </div>
        `;

        modal.appendChild(modalContent);
        document.body.appendChild(modal);

        // Populate lists
        const listsContainer = document.getElementById('lists-container');
        if (userLists.length === 0) {
          listsContainer.innerHTML = '<p style="color: var(--text-secondary); text-align: center;">No lists found. Create a new list to get started!</p>';
        } else {
          userLists.forEach(list => {
            const listItem = document.createElement('div');
            listItem.style.cssText = `
              padding: 0.75rem;
              border: 1px solid var(--border-color);
              border-radius: 6px;
              margin-bottom: 0.5rem;
              cursor: pointer;
              transition: all 0.2s ease;
              display: flex;
              align-items: center;
              gap: 0.75rem;
            `;
            
            listItem.innerHTML = `
              <div style="
                width: 32px;
                height: 32px;
                min-width: 32px;
                background: var(--accent-primary);
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 1.2rem;
                color: white;
                font-weight: bold;
              ">+</div>
              <div style="flex: 1; min-width: 0;">
                <h3 style="margin: 0; color: var(--text-primary); font-size: 0.95rem; font-weight: 600; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">${list.name}</h3>
                <div style="margin-top: 0.25rem; font-size: 0.8rem; color: var(--text-secondary);">
                  ${list.movies_count || 0} movies
                </div>
              </div>
            `;

            listItem.addEventListener('click', () => {
              addMovieToList(currentMovieId, list.id);
              closeListPicker();
            });

            listItem.addEventListener('mouseenter', () => {
              listItem.style.borderColor = 'var(--accent-primary)';
              listItem.style.background = 'rgba(0, 255, 255, 0.1)';
              listItem.style.transform = 'translateX(4px)';
            });

            listItem.addEventListener('mouseleave', () => {
              listItem.style.borderColor = 'var(--border-color)';
              listItem.style.background = 'transparent';
              listItem.style.transform = 'translateX(0)';
            });

            listsContainer.appendChild(listItem);
          });
        }
      }

      function closeListPicker() {
        const modal = document.getElementById('list-picker-modal');
        if (modal) {
          modal.remove();
        }
      }

      function createNewList() {
        window.location.href = '/lists/new';
      }

      // Sharing modal functionality
      function showSharingModal() {
        const listId = window.location.pathname.split('/').pop();
        const listUrl = `${window.location.origin}/lists/${listId}`;
        
        // Create modal overlay
        const modal = document.createElement('div');
        modal.id = 'sharing-modal';
        modal.style.cssText = `
          position: fixed;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          background: rgba(0, 0, 0, 0.5);
          display: flex;
          align-items: center;
          justify-content: center;
          z-index: 1000;
        `;

        // Create modal content
        const modalContent = document.createElement('div');
        modalContent.style.cssText = `
          background: var(--card-background);
          border-radius: 12px;
          padding: 2rem;
          max-width: 500px;
          width: 90%;
          box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
        `;

        modalContent.innerHTML = `
          <h2 style="margin: 0 0 1rem 0; color: var(--text-primary);">Share List</h2>
          <p style="color: var(--text-secondary); margin-bottom: 1.5rem;">Share this list with others</p>
          
          <div style="margin-bottom: 1.5rem;">
            <label style="display: block; font-weight: 600; margin-bottom: 0.5rem; color: var(--text-primary);">List URL</label>
            <div style="display: flex; gap: 0.5rem;">
              <input type="text" id="list-url" value="${listUrl}" readonly style="
                flex: 1;
                padding: 0.75rem;
                border: 1px solid var(--border-color);
                border-radius: 8px;
                background: var(--background-secondary);
                color: var(--text-primary);
              ">
              <button onclick="copyListUrl()" style="
                padding: 0.75rem 1rem;
                background: var(--accent-primary);
                color: white;
                border: none;
                border-radius: 8px;
                cursor: pointer;
                white-space: nowrap;
              ">Copy</button>
            </div>
          </div>

          <div style="margin-bottom: 1.5rem;">
            <h3 style="margin: 0 0 1rem 0; color: var(--text-primary);">Share Options</h3>
            <div style="display: flex; gap: 1rem; flex-wrap: wrap;">
              <button onclick="shareOnTwitter('${listUrl}')" style="
                padding: 0.75rem 1rem;
                background: #1da1f2;
                color: white;
                border: none;
                border-radius: 8px;
                cursor: pointer;
                display: flex;
                align-items: center;
                gap: 0.5rem;
              ">
                <span>🐦</span> Twitter
              </button>
              <button onclick="shareOnFacebook('${listUrl}')" style="
                padding: 0.75rem 1rem;
                background: #4267b2;
                color: white;
                border: none;
                border-radius: 8px;
                cursor: pointer;
                display: flex;
                align-items: center;
                gap: 0.5rem;
              ">
                <span>📘</span> Facebook
              </button>
              <button onclick="shareViaEmail('${listUrl}')" style="
                padding: 0.75rem 1rem;
                background: #6b7280;
                color: white;
                border: none;
                border-radius: 8px;
                cursor: pointer;
                display: flex;
                align-items: center;
                gap: 0.5rem;
              ">
                <span>📧</span> Email
              </button>
            </div>
          </div>

          <div style="display: flex; gap: 1rem; justify-content: flex-end;">
            <button onclick="closeSharingModal()" style="
              padding: 0.75rem 1.5rem;
              background: transparent;
              color: var(--text-primary);
              border: 1px solid var(--border-color);
              border-radius: 8px;
              cursor: pointer;
            ">Close</button>
          </div>
        `;

        modal.appendChild(modalContent);
        document.body.appendChild(modal);
      }

      function closeSharingModal() {
        const modal = document.getElementById('sharing-modal');
        if (modal) {
          modal.remove();
        }
      }

      function copyListUrl() {
        const urlInput = document.getElementById('list-url');
        urlInput.select();
        urlInput.setSelectionRange(0, 99999); // For mobile devices
        
        try {
          document.execCommand('copy');
          showNotification('URL copied to clipboard!', 'success');
        } catch (err) {
          // Fallback for modern browsers
          navigator.clipboard.writeText(urlInput.value).then(() => {
            showNotification('URL copied to clipboard!', 'success');
          }).catch(() => {
            showNotification('Failed to copy URL', 'error');
          });
        }
      }

      function shareOnTwitter(url) {
        const text = `Check out this awesome movie list!`;
        const twitterUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(text)}&url=${encodeURIComponent(url)}`;
        window.open(twitterUrl, '_blank', 'width=600,height=400');
      }

      function shareOnFacebook(url) {
        const facebookUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(url)}`;
        window.open(facebookUrl, '_blank', 'width=600,height=400');
      }

      function shareViaEmail(url) {
        const subject = 'Check out this movie list!';
        const body = `I found this great movie list and thought you might like it:\n\n${url}`;
        const mailtoUrl = `mailto:?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;
        window.location.href = mailtoUrl;
      }

      // Drag and drop functionality for list reordering
      function initializeDragAndDrop() {
        const sortableContainer = document.getElementById('sortable-movies');
        if (!sortableContainer) return;

        let draggedElement = null;

        // Add drag event listeners to all sortable items
        const sortableItems = document.querySelectorAll('.sortable-item');
        sortableItems.forEach(item => {
          item.draggable = true;
          
          item.addEventListener('dragstart', function(e) {
            draggedElement = this;
            this.style.opacity = '0.5';
            e.dataTransfer.effectAllowed = 'move';
            e.dataTransfer.setData('text/html', this.outerHTML);
          });

          item.addEventListener('dragend', function(e) {
            this.style.opacity = '1';
            draggedElement = null;
          });

          item.addEventListener('dragover', function(e) {
            e.preventDefault();
            e.dataTransfer.dropEffect = 'move';
          });

          item.addEventListener('drop', function(e) {
            e.preventDefault();
            
            if (draggedElement && draggedElement !== this) {
              // Swap positions
              const parent = this.parentNode;
              const nextSibling = this.nextSibling;
              
              parent.insertBefore(draggedElement, nextSibling);
              
              // Update positions and save to server
              updateListOrder();
            }
          });
        });
      }

      function updateListOrder() {
        const sortableItems = document.querySelectorAll('.sortable-item');
        const positions = {};
        
        sortableItems.forEach((item, index) => {
          const listMovieId = item.dataset.listMovieId;
          positions[listMovieId] = index + 1;
        });

        // Send update to server
        const listId = window.location.pathname.split('/').pop();
        fetch(`/lists/${listId}/list_movies/update_positions`, {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content
          },
          body: JSON.stringify({ positions: positions })
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            // Update position numbers in the UI
            sortableItems.forEach((item, index) => {
              const positionElement = item.querySelector('.movie-position');
              if (positionElement) {
                positionElement.textContent = `#${index + 1}`;
              }
              item.dataset.position = index + 1;
            });
          }
        })
        .catch(error => {
          console.error('Error updating list order:', error);
          showNotification('Failed to update list order', 'error');
        });
      }

      // Add event listeners for remove buttons
      document.addEventListener('DOMContentLoaded', function() {
        const removeButtons = document.querySelectorAll('.remove-movie');
        removeButtons.forEach(button => {
          button.addEventListener('click', function() {
            const movieId = this.dataset.movieId;
            const listId = this.dataset.listId;
            removeMovieFromList(movieId, listId);
          });
        });

        // Initialize drag and drop
        initializeDragAndDrop();
      });
      // User dropdown menu
      function toggleUserMenu() {
        const dropdown = document.getElementById('userDropdown');
        dropdown.classList.toggle('show');
      }

      // Close dropdown when clicking outside
      document.addEventListener('click', function(event) {
        const dropdown = document.getElementById('userDropdown');
        const toggle = document.querySelector('.user-menu-toggle');
        
        if (dropdown && toggle && !toggle.contains(event.target) && !dropdown.contains(event.target)) {
          dropdown.classList.remove('show');
        }
      });
    </script>
  </body>
</html>
